# Workflow name for deploying to the development environment
name: Deploy to Development env

# Trigger the workflow on push events to the "development" branch
on:
  push:
    branches:
      - development

jobs:
  # Define a job named "build_and_deploy" that runs on the latest Ubuntu environment
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      # Step to check out the code from the "development" branch
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: development

      # Step to configure AWS credentials using secrets stored in GitHub
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.DEV_AWS_REGION }}

      # Step to set up SSH access to the EC2 instance
      - name: Set up SSH
        run: |
         mkdir -p ~/.ssh
         echo "${{ secrets.DEV_EC2_PRIVATE_KEY }}" > ~/.ssh/id_rsa
         chmod 600 ~/.ssh/id_rsa
         ssh-keyscan -H ${{ secrets.DEV_EC2_IP }} >> ~/.ssh/known_hosts

      # Step to log in to Amazon ECR (Elastic Container Registry)
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Step to build, tag, and push the Docker image to ECR
      - name: Build, tag, and push image to ECR
        run: |
          docker build --no-cache -t ${{ steps.login-ecr.outputs.registry }}/${{ secrets.DEV_ECR_REPOSITORY }}:${{ github.sha }} -f docker/dev.Dockerfile .
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ secrets.DEV_ECR_REPOSITORY }}:${{ github.sha }}
        env:
          AWS_REGION: ${{ secrets.DEV_AWS_REGION }}
          ECR_REPOSITORY: ${{ secrets.DEV_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}

      # Step to deploy the Docker image to the EC2 instance
      - name: Deploy to EC2
        run: |
          ssh -i /home/${{ secrets.DEV_EC2_USER }}/.ssh/id_rsa -T -o StrictHostKeyChecking=no -o GSSAPIAuthentication=no ${{ secrets.DEV_EC2_USER }}@${{ secrets.DEV_EC2_IP }} << 'EOF'
            # Install git if not already installed
            sudo yum install git -y  # Assuming Ubuntu; adjust for other distributions as necessary

            # Navigate to the project directory or clone if not present
            cd /home/${{ secrets.DEV_EC2_USER }}/
            if [ ! -d "${{ secrets.REPOSITORY_NAME }}" ]; then
              ssh-keyscan github.com >> ~/.ssh/known_hosts
              git clone ${{ secrets.SSH_CLONE_LINK }}
            fi
            cd ${{ secrets.REPOSITORY_NAME }}

            # Ensure you're on the development branch and sync with origin
            git checkout development
            git fetch origin development

            # Reset local changes to allow a clean pull
            git reset --hard origin/development
            git pull origin development

            # Check if example.env exists and copy it to .env if it does
            if [ ! -f "./env_files/.env" ]; then
              cd ./env_files
              cp example.env .env
              sed -i 's/ALLOWED_HOSTS="127.0.0.1"/ALLOWED_HOSTS="127.0.0.1,${{ secrets.DEV_EC2_IP }}"/' .env
              cd ..
            fi

            # Navigate to the Docker directory and run docker-compose
            cd docker
            docker-compose -f docker-compose-dev.yml pull
            docker-compose -f docker-compose-dev.yml up -d --force-recreate
          EOF
