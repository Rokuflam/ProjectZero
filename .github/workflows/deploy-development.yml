# deploy.tpl
name: Deploy to Development env

on:
  push:
    branches:
      - development

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: development

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.DEV_AWS_REGION }}

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEV_EC2_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DEV_EC2_IP }} >> ~/.ssh/known_hosts

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to ECR
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ secrets.DEV_ECR_REPOSITORY }}:${{ github.sha }} -f docker/Dockerfile .
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ secrets.DEV_ECR_REPOSITORY }}:${{ github.sha }}
        env:
          AWS_REGION: ${{ secrets.DEV_AWS_REGION }}
          ECR_REPOSITORY: ${{ secrets.DEV_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}

      - name: Deploy to EC2
        run: |
          ssh -T -o StrictHostKeyChecking=no ${{ secrets.DEV_EC2_USER }}@${{ secrets.DEV_EC2_IP }} << 'EOF'
            # Install git if not already installed
            sudo yum install git -y  # Assuming Ubuntu; adjust for other distributions as necessary

            # Navigate to the project directory or clone if not present
            cd /home/${{ secrets.DEV_EC2_USER }}/
            if [ ! -d "${{ vars.REPOSITORY_NAME }}" ]; then
              ssh-keyscan github.com >> ~/.ssh/known_hosts
              git clone ${{ vars.SSH_CLONE_LINK }}
            fi
            cd ${{ vars.REPOSITORY_NAME }}

            # Check if example.env exists and copy it to .env if it does
            if [ ! -f "env_files/.env" ]; then
              cp "env_files/example.env" "env_files/.env"
              # Replace ALLOWED_HOSTS value in the .env file
              if grep -q "ALLOWED_HOSTS=127.0.0.1,localhost" "env_files/.env"; then
                sed -i "s/ALLOWED_HOSTS=127.0.0.1,localhost/ALLOWED_HOSTS=127.0.0.1,localhost,${{ secrets.DEV_EC2_IP }}/" "env_files/.env"
              fi
            fi

            # Ensure you're on the development branch and sync with origin
            git checkout development
            git fetch origin development

            # Reset local changes to allow a clean pull
            git reset --hard origin/development
            git pull origin development

            # Navigate to the Docker directory and run docker-compose
            cd docker
            docker-compose -f docker-compose-dev.yml pull
            docker-compose -f docker-compose-dev.yml up -d
          EOF
